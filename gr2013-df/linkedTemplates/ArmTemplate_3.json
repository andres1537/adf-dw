{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "gr2013-df"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_categorias_producto')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_productos_categoria",
								"type": "DatasetReference"
							},
							"name": "StagingCategoriasProducto"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_categoria",
								"type": "DatasetReference"
							},
							"name": "ValidationCategoriasProducto",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Categoria} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingCategoriasProducto",
						"ConversionColumnas filter({Categoria Producto ID} != '') ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Categoria Producto ID}),",
						"     {Descripcion Categoria} = first({Descripcion Categoria})) ~> RemoverDuplicados",
						"StagingCategoriasProducto derive({Categoria Producto ID} = case ( \r",
						"    (isNull({Categoria Producto ID}) || (upper({Categoria Producto ID}) == 'NULL')), '', {Categoria Producto ID} \r",
						")) ~> ConversionColumnas",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Categoria} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Categoria Producto ID},",
						"          {Descripcion Categoria}",
						"     )) ~> ValidationCategoriasProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_cliente_localizacion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_lt_customer_localizacion",
								"type": "DatasetReference"
							},
							"name": "StagingClienteLocalizacion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_lt_customer_localizacion",
								"type": "DatasetReference"
							},
							"name": "ValidationClienteLocalizacion",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Cliente ID} as string,",
						"          Pais as string,",
						"          Ciudad as string,",
						"          Estado as string,",
						"          {Codigo Postal} as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingClienteLocalizacion",
						"StagingClienteLocalizacion derive({Cliente ID} = toInteger(\r",
						"    case ( \r",
						"        (isNull({Cliente ID}) || (upper({Cliente ID}) == 'NULL')), '', {Cliente ID} \r",
						"    )\r",
						"),",
						"          {Codigo Postal} = toInteger(\r",
						"    case ( \r",
						"        (isNull({Codigo Postal}) || (upper({Codigo Postal}) == 'NULL')), '', {Codigo Postal} \r",
						"    )\r",
						"),",
						"          Region = toInteger(\r",
						"    case ( \r",
						"        (isNull(Region) || (upper(Region) == 'NULL')), '', Region\r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull({Cliente ID})), {Cliente ID} > 0) &&\r",
						"and(not(isNull({Codigo Postal})), {Codigo Postal} > 0) &&\r",
						"and(not(isNull(Region)), Region > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Cliente ID}),",
						"     Pais = first(Pais),",
						"          Ciudad = first(Ciudad),",
						"          Estado = first(Estado),",
						"          {Codigo Postal} = first({Codigo Postal}),",
						"          Region = first(Region)) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Cliente ID} as integer,",
						"          Pais as string,",
						"          Ciudad as string,",
						"          Estado as string,",
						"          {Codigo Postal} as integer,",
						"          Region as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Cliente ID},",
						"          Pais,",
						"          Ciudad,",
						"          Estado,",
						"          {Codigo Postal},",
						"          Region",
						"     )) ~> ValidationClienteLocalizacion"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_clientes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_customer",
								"type": "DatasetReference"
							},
							"name": "StagingClientes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_customer",
								"type": "DatasetReference"
							},
							"name": "ValidationClientes",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Cliente ID} as string,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Segmento as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingClientes",
						"StagingClientes derive({Cliente ID} = toInteger(\r",
						"    case ( \r",
						"\r",
						"        (isNull({Cliente ID}) || (upper({Cliente ID}) == 'NULL')), '',\r",
						"        and(not(isNull({Cliente ID}) || (upper({Cliente ID}) == 'NULL')), like({Cliente ID}, '%-%')), split({Cliente ID}, '-')[2],\r",
						"        {Cliente ID} \r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull({Cliente ID})), {Cliente ID} > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Cliente ID}),",
						"     Nombre = first({Nombre}),",
						"          Apellido = first({Apellido}),",
						"          Segmento = first({Segmento})) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Cliente ID} as integer,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Segmento as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Cliente ID},",
						"          Nombre,",
						"          Apellido,",
						"          Segmento",
						"     )) ~> ValidationClientes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_detalle_envios')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_tb_detalle_envios",
								"type": "DatasetReference"
							},
							"name": "StagingDetalleEnvios"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_detalle_envios",
								"type": "DatasetReference"
							},
							"name": "ValidationDetalleEnvios",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          num_order as string,",
						"          fec_orden as date,",
						"          fec_envio as date,",
						"          modo_envio as string,",
						"          cliente_id as string,",
						"          imp_subtotal as double,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingDetalleEnvios",
						"ConversionColumnas filter(num_order != '' && modo_envio != '' && cliente_id != '') ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy(num_order),",
						"     fec_orden = first(fec_orden),",
						"          fec_envio = first(fec_envio),",
						"          modo_envio = first(modo_envio),",
						"          cliente_id = first(cliente_id),",
						"          imp_subtotal = first(imp_subtotal),",
						"          region_id = first(region_id)) ~> RemoverDuplicados",
						"StagingDetalleEnvios derive(num_order = case ( \r",
						"    (isNull(num_order) || (upper(num_order) == 'NULL')), '', num_order\r",
						"),",
						"          modo_envio = case ( \r",
						"    (isNull(modo_envio) || (upper(modo_envio) == 'NULL')), '', modo_envio\r",
						"),",
						"          cliente_id = case ( \r",
						"\r",
						"        (isNull(cliente_id) || (upper(cliente_id) == 'NULL')), '',\r",
						"        and(not(isNull(cliente_id) || (upper(cliente_id) == 'NULL')), like(cliente_id, '%-%')), split(cliente_id, '-')[2],\r",
						"        cliente_id \r",
						"    )) ~> ConversionColumnas",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          num_order as string,",
						"          fec_orden as date,",
						"          fec_envio as date,",
						"          modo_envio as string,",
						"          cliente_id as string,",
						"          imp_subtotal as double,",
						"          region_id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          num_order,",
						"          fec_orden,",
						"          fec_envio,",
						"          modo_envio,",
						"          cliente_id,",
						"          imp_subtotal,",
						"          region_id",
						"     )) ~> ValidationDetalleEnvios"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_detalle_ordenes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_detalle_ordenes",
								"type": "DatasetReference"
							},
							"name": "StagingDetalleOrdenes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_detalle_ordenes",
								"type": "DatasetReference"
							},
							"name": "ValidationDetalleOrdenes",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Detalle Orden} as integer,",
						"          {Numero Orden} as string,",
						"          {Producto ID} as integer,",
						"          {Linea Total} as double,",
						"          Cantidad as integer,",
						"          Descuento as double,",
						"          {Precio Unitario} as double,",
						"          Ganancia as double,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingDetalleOrdenes",
						"ConversionColumnas filter(and(not(isNull({Detalle Orden})), {Detalle Orden} > 0) && \r",
						"({Numero Orden} != '') && \r",
						"and(not(isNull({Producto ID})), {Producto ID} > 0) && \r",
						"and(not(isNull(region_id)), region_id > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Numero Orden},",
						"          {Detalle Orden},",
						"          {Producto ID},",
						"          region_id),",
						"     {Linea Total} = first({Linea Total}),",
						"          Cantidad = first(Cantidad),",
						"          Descuento = first(Descuento),",
						"          {Precio Unitario} = first({Precio Unitario}),",
						"          Ganancia = first(Ganancia)) ~> RemoverDuplicados",
						"StagingDetalleOrdenes derive({Numero Orden} = case ( \r",
						"    (isNull({Numero Orden}) || (upper({Numero Orden}) == 'NULL')), '', {Numero Orden} \r",
						")) ~> ConversionColumnas",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Detalle Orden} as integer,",
						"          {Numero Orden} as string,",
						"          {Producto ID} as integer,",
						"          {Linea Total} as double,",
						"          Cantidad as integer,",
						"          Descuento as double,",
						"          {Precio Unitario} as double,",
						"          Ganancia as double,",
						"          region_id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Detalle Orden},",
						"          {Numero Orden},",
						"          {Producto ID},",
						"          {Linea Total},",
						"          Cantidad,",
						"          Descuento,",
						"          {Precio Unitario},",
						"          Ganancia,",
						"          region_id",
						"     )) ~> ValidationDetalleOrdenes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_fechas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_fechas",
								"type": "DatasetReference"
							},
							"name": "StagingFechas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_fechas",
								"type": "DatasetReference"
							},
							"name": "ValidationFechas",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_fecha as string,",
						"          num_anio as string,",
						"          num_trimestre as string,",
						"          num_mes as string,",
						"          num_dia as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingFechas",
						"StagingFechas derive(id_fecha = toDate(id_fecha, 'yyyy-MM-dd'),",
						"          num_anio = toInteger(num_anio),",
						"          num_trimestre = toInteger(num_trimestre),",
						"          num_mes = toInteger(num_mes),",
						"          num_dia = toInteger(num_dia)) ~> ConversionColumnas",
						"ConversionColumnas filter(not(isNull(id_fecha))) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy(id_fecha),",
						"     num_anio = first(num_anio),",
						"          num_trimestre = first(num_trimestre),",
						"          num_mes = first(num_mes),",
						"          num_dia = first(num_dia)) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as date,",
						"          num_anio as integer,",
						"          num_trimestre as integer,",
						"          num_mes as integer,",
						"          num_dia as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          id_fecha,",
						"          num_anio,",
						"          num_trimestre,",
						"          num_mes,",
						"          num_dia",
						"     )) ~> ValidationFechas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_modos_envio')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_tb_modo_envio",
								"type": "DatasetReference"
							},
							"name": "StagingModosEnvio"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_modo_envio",
								"type": "DatasetReference"
							},
							"name": "ValidationModosEnvio",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_modo as string,",
						"          Descripcion as string,",
						"          Tipo_x0020_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingModosEnvio",
						"StagingModosEnvio derive(id_modo = toInteger(\r",
						"    case ( \r",
						"        (isNull(id_modo) || (upper(id_modo) == 'NULL')), '', id_modo\r",
						"    )\r",
						"),",
						"          Tipo_x0020_ID = toInteger(\r",
						"    case ( \r",
						"        (isNull(Tipo_x0020_ID) || (upper(Tipo_x0020_ID) == 'NULL')), '', Tipo_x0020_ID\r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull(id_modo)), id_modo >= 0) &&\r",
						"and(not(isNull(Tipo_x0020_ID)), Tipo_x0020_ID > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy(id_modo),",
						"     Descripcion = first(Descripcion),",
						"          Tipo_x0020_ID = first(Tipo_x0020_ID)) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_modo as integer,",
						"          Descripcion as string,",
						"          Tipo_x0020_ID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          id_modo,",
						"          Descripcion,",
						"          Tipo_x0020_ID",
						"     )) ~> ValidationModosEnvio"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_productos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_productos",
								"type": "DatasetReference"
							},
							"name": "StagingProductos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos",
								"type": "DatasetReference"
							},
							"name": "ValidationProductos",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Producto ID} as string,",
						"          {Numero Producto} as string,",
						"          {Producto Sub Categoria ID} as string,",
						"          {Nombre Producto} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingProductos",
						"StagingProductos derive({Producto ID} = toInteger(\r",
						"    case ( \r",
						"        (isNull({Producto ID}) || (upper({Producto ID}) == 'NULL')), '', {Producto ID} \r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull({Producto ID})), {Producto ID} > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Producto ID}),",
						"     {Numero Producto} = first({Numero Producto}),",
						"          {Producto Sub Categoria ID} = first({Producto Sub Categoria ID}),",
						"          {Nombre Producto} = first({Nombre Producto})) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Producto ID} as integer,",
						"          {Numero Producto} as string,",
						"          {Producto Sub Categoria ID} as string,",
						"          {Nombre Producto} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Producto ID},",
						"          {Numero Producto},",
						"          {Producto Sub Categoria ID},",
						"          {Nombre Producto}",
						"     )) ~> ValidationProductos"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_regiones')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_Regiones",
								"type": "DatasetReference"
							},
							"name": "StagingRegiones"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_Regiones",
								"type": "DatasetReference"
							},
							"name": "ValidationRegiones",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Region ID} as string,",
						"          {Region Desc} as string,",
						"          {Detalle region} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingRegiones",
						"StagingRegiones derive({Region ID} = toInteger(\r",
						"    case ( \r",
						"        (isNull({Region ID}) || (upper({Region ID}) == 'NULL')), '', {Region ID} \r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull({Region ID})), {Region ID} > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Region ID}),",
						"     {Region Desc} = first({Region Desc}),",
						"          {Detalle region} = first({Detalle region})) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Region ID} as integer,",
						"          {Region Desc} as string,",
						"          {Detalle region} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Region ID},",
						"          {Region Desc},",
						"          {Detalle region}",
						"     )) ~> ValidationRegiones"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_subcategorias_producto')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_productos_sub_categoria",
								"type": "DatasetReference"
							},
							"name": "StagingSubcategoriasProducto"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_sub_categoria",
								"type": "DatasetReference"
							},
							"name": "ValidationSubcategoriasProducto",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Subcategoria Producto ID} as string,",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Subcategoria} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingSubcategoriasProducto",
						"ConversionColumnas filter({Subcategoria Producto ID} != '') ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Subcategoria Producto ID}),",
						"     {Categoria Producto ID} = first({Categoria Producto ID}),",
						"          {Descripcion Subcategoria} = first({Descripcion Subcategoria})) ~> RemoverDuplicados",
						"StagingSubcategoriasProducto derive({Subcategoria Producto ID} = case ( \r",
						"    (isNull({Subcategoria Producto ID}) || (upper({Subcategoria Producto ID}) == 'NULL')), '', {Subcategoria Producto ID} \r",
						")) ~> ConversionColumnas",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Subcategoria Producto ID} as string,",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Subcategoria} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Subcategoria Producto ID},",
						"          {Categoria Producto ID},",
						"          {Descripcion Subcategoria}",
						"     )) ~> ValidationSubcategoriasProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_target_region')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_db_target_region",
								"type": "DatasetReference"
							},
							"name": "StagingTargetRegion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_db_target_region",
								"type": "DatasetReference"
							},
							"name": "ValidationTargetRegionn",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          fecha as string,",
						"          anio as string,",
						"          mes as string,",
						"          {Region ID} as string,",
						"          Target as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingTargetRegion",
						"ConversionColumnas filter(not(isNull(fecha)) &&\r",
						"and(not(isNull(anio)), anio > 0) &&\r",
						"and(not(isNull(mes)), mes > 0) &&\r",
						"and(not(isNull({Region ID})), {Region ID} > 0) &&\r",
						"and(not(isNull(Target)), Target > 0)) ~> FiltrarInconsistencias",
						"StagingTargetRegion derive(fecha = toDate(\r",
						"    case ( \r",
						"        (isNull(fecha) || (upper(fecha) == 'NULL')), '', fecha\r",
						"    ), 'yyyyMM'\r",
						"),",
						"          anio = toInteger(\r",
						"    case ( \r",
						"        (isNull(anio) || (upper(anio) == 'NULL')), '', anio\r",
						"    )\r",
						"),",
						"          mes = toInteger(\r",
						"    case ( \r",
						"        (isNull(mes) || (upper(mes) == 'NULL')), '', mes\r",
						"    )\r",
						"),",
						"          {Region ID} = toInteger(    case (         (isNull({Region ID}) || (upper({Region ID}) == 'NULL')), '', {Region ID}     )),",
						"          Target = toDecimal(\r",
						"    case ( \r",
						"        (isNull(Target) || (upper(Target) == 'NULL')), '', replace(trim(Target), ',', '')\r",
						"    ), 12, 2\r",
						")) ~> ConversionColumnas",
						"FiltrarInconsistencias sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          fecha as date,",
						"          anio as integer,",
						"          mes as integer,",
						"          {Region ID} as integer,",
						"          Target as decimal(12,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          fecha,",
						"          anio,",
						"          mes,",
						"          {Region ID},",
						"          Target",
						"     )) ~> ValidationTargetRegionn"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_tipos_envio')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_tb_tipo_envio",
								"type": "DatasetReference"
							},
							"name": "StagingTiposEnvio"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_tipo_envio",
								"type": "DatasetReference"
							},
							"name": "ValidationTiposEnvio",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_tipo as string,",
						"          Descripcion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingTiposEnvio",
						"StagingTiposEnvio derive(id_tipo = toInteger(\r",
						"    case ( \r",
						"        (isNull({id_tipo}) || (upper({id_tipo}) == 'NULL')), '', {id_tipo} \r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull(id_tipo)), id_tipo > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy(id_tipo),",
						"     Descripcion = first(Descripcion)) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_tipo as integer,",
						"          Descripcion as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          id_tipo,",
						"          Descripcion",
						"     )) ~> ValidationTiposEnvio"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_huerfanos_categorias_producto')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/huerfanos"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_categoria",
								"type": "DatasetReference"
							},
							"name": "Categorias"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_sub_categoria",
								"type": "DatasetReference"
							},
							"name": "Subcategorias"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_sub_categoria",
								"type": "DatasetReference"
							},
							"name": "CrearPadresFicticios"
						}
					],
					"transformations": [
						{
							"name": "ListaHuerfanos"
						},
						{
							"name": "ListaIDsHuerfanos"
						},
						{
							"name": "ListaPadresFicticios"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Categoria} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Categorias",
						"source(output(",
						"          {Subcategoria Producto ID} as string,",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Subcategoria} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Subcategorias",
						"Categorias, Subcategorias exists(Categorias@{Categoria Producto ID} == Subcategorias@{Categoria Producto ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> ListaHuerfanos",
						"ListaHuerfanos select(mapColumn(",
						"          id_categoria_producto = {Categoria Producto ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ListaIDsHuerfanos",
						"ListaIDsHuerfanos derive(id_subcategoria_producto = \" \",",
						"          id_categoria_producto = id_categoria_producto,",
						"          desc_subcategoria = \"huérfano de categorias_producto\") ~> ListaPadresFicticios",
						"ListaPadresFicticios sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Subcategoria Producto ID} as string,",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Subcategoria} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id_tipo = id_subcategoria_producto,",
						"          Descripcion = desc_subcategoria",
						"     )) ~> CrearPadresFicticios"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_huerfanos_modos_envio')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/huerfanos"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_modo_envio",
								"type": "DatasetReference"
							},
							"name": "ModosEnvio"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_tipo_envio",
								"type": "DatasetReference"
							},
							"name": "TiposEnvio"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_tipo_envio",
								"type": "DatasetReference"
							},
							"name": "CrearPadresFicticios"
						}
					],
					"transformations": [
						{
							"name": "ListaHuerfanos"
						},
						{
							"name": "ListaIDsHuerfanos"
						},
						{
							"name": "ListaPadresFicticios"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_modo as integer,",
						"          Descripcion as string,",
						"          Tipo_x0020_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ModosEnvio",
						"source(output(",
						"          id_tipo as integer,",
						"          Descripcion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TiposEnvio",
						"ModosEnvio, TiposEnvio exists(Tipo_x0020_ID == id_tipo,",
						"     negate:true,",
						"     broadcast: 'auto')~> ListaHuerfanos",
						"ListaHuerfanos select(mapColumn(",
						"          id_tipo_envio = Tipo_x0020_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ListaIDsHuerfanos",
						"ListaIDsHuerfanos derive(id_tipo_envio = id_tipo_envio,",
						"          desc_tipo_envio = \"huérfano de modos_envio\") ~> ListaPadresFicticios",
						"ListaPadresFicticios sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_tipo as integer,",
						"          Descripcion as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id_tipo = id_tipo_envio,",
						"          Descripcion = desc_tipo_envio",
						"     )) ~> CrearPadresFicticios"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_huerfanos_productos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/huerfanos"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos",
								"type": "DatasetReference"
							},
							"name": "Productos"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_sub_categoria",
								"type": "DatasetReference"
							},
							"name": "Subcategorias"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_sub_categoria",
								"type": "DatasetReference"
							},
							"name": "CrearPadresFicticios"
						}
					],
					"transformations": [
						{
							"name": "ListaHuerfanos"
						},
						{
							"name": "ListaIDsHuerfanos"
						},
						{
							"name": "ListaPadresFicticios"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Producto ID} as integer,",
						"          {Numero Producto} as string,",
						"          {Producto Sub Categoria ID} as string,",
						"          {Nombre Producto} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Productos",
						"source(output(",
						"          {Subcategoria Producto ID} as string,",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Subcategoria} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Subcategorias",
						"Productos, Subcategorias exists({Producto Sub Categoria ID} == {Subcategoria Producto ID},",
						"     negate:true,",
						"     broadcast: 'auto')~> ListaHuerfanos",
						"ListaHuerfanos select(mapColumn(",
						"          id_subcategoria_producto = {Producto Sub Categoria ID}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ListaIDsHuerfanos",
						"ListaIDsHuerfanos derive(id_subcategoria_producto = id_subcategoria_producto,",
						"          id_categoria_producto = \" \",",
						"          desc_subcategoria = \"huérfano de productos\") ~> ListaPadresFicticios",
						"ListaPadresFicticios sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Subcategoria Producto ID} as string,",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Subcategoria} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id_tipo = id_subcategoria_producto,",
						"          Descripcion = desc_subcategoria",
						"     )) ~> CrearPadresFicticios"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOAD_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FLOW_LOAD_fac_compras",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLOW_LOAD_fac_compras",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DetalleOrdenes": {},
									"DetalleEnvios": {},
									"Regiones": {},
									"FacCompras": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "3.load"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOAD_mensual')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FLOW_LOAD_dim_productos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLOW_LOAD_dim_productos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Productos": {},
									"Subcategorias": {},
									"Categorias": {},
									"DimProductos": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "3.load"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOAD_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FLOW_LOAD_dim_clientes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLOW_LOAD_dim_clientes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Clientes": {},
									"ClienteLocalizacion": {},
									"DimClientes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "3.load"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOAD_trimestral')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FLOW_LOAD_dim_modos_envio",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLOW_LOAD_dim_modos_envio",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ModosEnvio": {},
									"TiposEnvio": {},
									"DimModosEnvio": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FLOW_LOAD_dim_fechas",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLOW_LOAD_dim_fechas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Fechas": {},
									"DimFechas": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "3.load"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_TRANFORM_dim_clientes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "\n",
				"activities": [
					{
						"name": "FLOW_VALIDATION_clientes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLOW_VALIDATION_clientes",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingClientes": {},
									"ValidationClientes": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FLOW_VALIDATION_cliente_localizacion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "FLOW_VALIDATION_cliente_localizacion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingClienteLocalizacion": {},
									"ValidationClienteLocalizacion": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "2.transform/preprocessing"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FLOW_VALIDATION_clientes')]",
				"[concat(variables('factoryId'), '/dataflows/FLOW_VALIDATION_cliente_localizacion')]"
			]
		}
	]
}