{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "gr2013-df"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL_VALIDATION_tb_tipo_envio')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_SQL_TARGET_dw",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "3.validation"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id_tipo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Descripcion",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "validation",
					"table": "tb_tipo_envio"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EXTRACT_diario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "detalle_ordenes a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "maestria.LT_detalle_ordenes"
							},
							{
								"name": "Destination",
								"value": "staging.LT_detalle_ordenes"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.LT_detalle_ordenes",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Detalle Orden",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Detalle Orden",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Numero Orden",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Numero Orden",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Producto ID",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Producto ID",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Linea Total",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Linea Total",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Cantidad",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Cantidad",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Descuento",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Descuento",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Precio Unitario",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Precio Unitario",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "Ganancia",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Ganancia",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "region_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "region_id",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_SOURCE_LT_detalle_ordenes",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_LT_detalle_ordenes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "detalle_envios a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "maestria.tb_detalle_envios"
							},
							{
								"name": "Destination",
								"value": "staging.tb_detalle_envios"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.tb_detalle_envios",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "num_order",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "num_order",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "fec_orden",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "fec_orden",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "fec_envio",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "fec_envio",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "modo_envio",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "modo_envio",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "cliente_id",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "cliente_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imp_subtotal",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "imp_subtotal",
											"type": "Double",
											"physicalType": "float"
										}
									},
									{
										"source": {
											"name": "region_id",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "region_id",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_SQL_SOURCE_tb_detalle_envios",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_tb_detalle_envios",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "1.extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EXTRACT_mensual')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "productos_sub_categoria a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/LT_productos_sub_categoria.csv"
							},
							{
								"name": "Destination",
								"value": "staging.LT_productos_sub_categoria"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.LT_productos_sub_categoria",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Subcategoria Producto ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Subcategoria Producto ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Categoria Producto ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Categoria Producto ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Descripcion Subcategoria",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Descripcion Subcategoria",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_LT_productos_sub_categoria",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_LT_productos_sub_categoria",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "productos_categoria a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/LT_productos_categoria.csv"
							},
							{
								"name": "Destination",
								"value": "staging.LT_productos_categoria"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.LT_productos_categoria",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Categoria Producto ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Categoria Producto ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Descripcion Categoria",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Descripcion Categoria",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_LT_productos_categoria",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_LT_productos_categoria",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "productos a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/LT_productos.csv"
							},
							{
								"name": "Destination",
								"value": "staging.LT_productos"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.LT_productos",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Producto ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Producto ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Numero Producto",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Numero Producto",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Producto Sub Categoria ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Producto Sub Categoria ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Nombre Producto",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Nombre Producto",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_LT_productos",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_LT_productos",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "target_region a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/db_target_region.csv"
							},
							{
								"name": "Destination",
								"value": "staging.db_target_region"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.db_target_region",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "fecha",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "fecha",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Año",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "anio",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Mes",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "mes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Region ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Target",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Target",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_db_target_region",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_db_target_region",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "1.extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EXTRACT_semanal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "customer a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/LT_customer.json"
							},
							{
								"name": "Destination",
								"value": "staging.LT_customer"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.LT_customer",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Cliente ID']"
										},
										"sink": {
											"name": "Cliente ID",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Nombre']"
										},
										"sink": {
											"name": "Nombre",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Apellido']"
										},
										"sink": {
											"name": "Apellido",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Segmento']"
										},
										"sink": {
											"name": "Segmento",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_LT_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_LT_customer",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "customer_localizacion a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/lt_customer_localizacion.csv"
							},
							{
								"name": "Destination",
								"value": "staging.lt_customer_localizacion"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.lt_customer_localizacion",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Cliente ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Cliente ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Pais",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Pais",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Ciudad",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Ciudad",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Estado",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Estado",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Codigo Postal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Codigo Postal",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_lt_customer_localizacion",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_lt_customer_localizacion",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "1.extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_EXTRACT_trimestral')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "geografia a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/lt_geografia.json"
							},
							{
								"name": "Destination",
								"value": "staging.lt_geografia"
							}
						],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.lt_geografia",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['Pais']"
										},
										"sink": {
											"name": "Pais",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Estado']"
										},
										"sink": {
											"name": "Estado",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['Ciudad']"
										},
										"sink": {
											"name": "Ciudad",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_lt_geografia",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_lt_geografia",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "modo_envio a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/tb_modo_envio.xml"
							},
							{
								"name": "Destination",
								"value": "staging.tb_modo_envio"
							}
						],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"namespaces": true
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.tb_modo_envio",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['@id_modo']"
										},
										"sink": {
											"name": "id_modo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['@Descripcion']"
										},
										"sink": {
											"name": "Descripcion",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['@Tipo_x0020_ID']"
										},
										"sink": {
											"name": "Tipo_x0020_ID",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['Data']['table_maestria.tb_modo_envio']['maestria.tb_modo_envio']"
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_tb_modo_envio",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_tb_modo_envio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "tipo_envio a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/tb_tipo_envio.xml"
							},
							{
								"name": "Destination",
								"value": "staging.tb_tipo_envio"
							}
						],
						"typeProperties": {
							"source": {
								"type": "XmlSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "XmlReadSettings",
									"validationMode": "none",
									"detectDataType": true,
									"namespaces": true
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.tb_tipo_envio",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['@id_tipo']"
										},
										"sink": {
											"name": "id_tipo",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['@Descripción']"
										},
										"sink": {
											"name": "Descripcion",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['Data']['table_maestria.tb_tipo_envio']['maestria.tb_tipo_envio']"
							}
						},
						"inputs": [
							{
								"referenceName": "DS_GITHUB_SOURCE_tb_tipo_envio",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_tb_tipo_envio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "regiones a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-github/banmarket/Regiones.txt"
							},
							{
								"name": "Destination",
								"value": "staging.Regiones"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.Regiones",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Region ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region ID",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Region Desc",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Region Desc",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Detalle region",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Detalle region",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_Regiones",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_Regiones",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "fechas a STAGING",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "source-utilities//fechas.csv"
							},
							{
								"name": "Destination",
								"value": "staging.fechas"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table staging.fechas",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
										"type": "LinkedServiceReference"
									},
									"path": "errors"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id_fecha",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id_fecha",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "num_anio",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "num_anio",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "num_trimestre",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "num_trimestre",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "num_mes",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "num_mes",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "num_dia",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "num_dia",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_FILESTORAGE_SOURCE_fechas",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL_STAGING_fechas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "1.extract"
				},
				"annotations": [],
				"lastPublishTime": "2022-05-28T12:03:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_LOAD_dim_clientes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3.load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_customer",
								"type": "DatasetReference"
							},
							"name": "Clientes"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_lt_customer_localizacion",
								"type": "DatasetReference"
							},
							"name": "ClienteLocalizacion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_dim_clientes",
								"type": "DatasetReference"
							},
							"name": "DimClientes",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "JoinClienteLocalizacion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Cliente ID} as integer,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Segmento as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Clientes",
						"source(output(",
						"          {Cliente ID} as integer,",
						"          Pais as string,",
						"          Ciudad as string,",
						"          Estado as string,",
						"          {Codigo Postal} as integer,",
						"          Region as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ClienteLocalizacion",
						"Clientes, ClienteLocalizacion join(Clientes@{Cliente ID} == ClienteLocalizacion@{Cliente ID},",
						"     joinType:'left',",
						"     broadcast: 'auto')~> JoinClienteLocalizacion",
						"JoinClienteLocalizacion sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_cliente as integer,",
						"          desc_nombres as string,",
						"          desc_apellidos as string,",
						"          desc_segmento as string,",
						"          desc_pais as string,",
						"          desc_ciudad as string,",
						"          desc_estado as string,",
						"          num_codigo_postal as integer,",
						"          id_region as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          id_cliente = Clientes@{Cliente ID},",
						"          desc_nombres = Nombre,",
						"          desc_apellidos = Apellido,",
						"          desc_segmento = Segmento,",
						"          desc_pais = Pais,",
						"          desc_ciudad = Ciudad,",
						"          desc_estado = Estado,",
						"          num_codigo_postal = {Codigo Postal},",
						"          id_region = Region",
						"     )) ~> DimClientes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_LOAD_dim_fechas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3.load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_fechas",
								"type": "DatasetReference"
							},
							"name": "Fechas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_dim_fechas",
								"type": "DatasetReference"
							},
							"name": "DimFechas",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          id_fecha as date,",
						"          num_anio as integer,",
						"          num_trimestre as integer,",
						"          num_mes as integer,",
						"          num_dia as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Fechas",
						"Fechas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as date,",
						"          num_anio as integer,",
						"          num_trimestre as integer,",
						"          num_mes as integer,",
						"          num_dia as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          id_fecha,",
						"          num_anio,",
						"          num_trimestre,",
						"          num_mes,",
						"          num_dia",
						"     )) ~> DimFechas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_LOAD_dim_modos_envio')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3.load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_modo_envio",
								"type": "DatasetReference"
							},
							"name": "ModosEnvio"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_tipo_envio",
								"type": "DatasetReference"
							},
							"name": "TiposEnvio"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_dim_modos_envio",
								"type": "DatasetReference"
							},
							"name": "DimModosEnvio",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "JoinTiposEnvio"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_modo as integer,",
						"          Descripcion as string,",
						"          Tipo_x0020_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ModosEnvio",
						"source(output(",
						"          id_tipo as integer,",
						"          Descripcion as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TiposEnvio",
						"ModosEnvio, TiposEnvio join(Tipo_x0020_ID == id_tipo,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> JoinTiposEnvio",
						"JoinTiposEnvio sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_modo_envio as integer,",
						"          desc_modo_envio as string,",
						"          id_tipo_envio as integer,",
						"          desc_tipo_envio as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          id_modo_envio = id_modo,",
						"          desc_modo_envio = ModosEnvio@Descripcion,",
						"          id_tipo_envio = id_tipo,",
						"          desc_tipo_envio = TiposEnvio@Descripcion",
						"     )) ~> DimModosEnvio"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL_VALIDATION_tb_tipo_envio')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_LOAD_dim_productos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3.load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos",
								"type": "DatasetReference"
							},
							"name": "Productos"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_sub_categoria",
								"type": "DatasetReference"
							},
							"name": "Subcategorias"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_categoria",
								"type": "DatasetReference"
							},
							"name": "Categorias"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_dim_productos",
								"type": "DatasetReference"
							},
							"name": "DimProductos",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "JoinSubcategorias"
						},
						{
							"name": "JoinCategorias"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Producto ID} as integer,",
						"          {Numero Producto} as string,",
						"          {Producto Sub Categoria ID} as string,",
						"          {Nombre Producto} as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Productos",
						"source(output(",
						"          {Subcategoria Producto ID} as string,",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Subcategoria} as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Subcategorias",
						"source(output(",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Categoria} as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Categorias",
						"Productos, Subcategorias join({Producto Sub Categoria ID} == {Subcategoria Producto ID},",
						"     joinType:'left',",
						"     broadcast: 'auto')~> JoinSubcategorias",
						"JoinSubcategorias, Categorias join(Subcategorias@{Categoria Producto ID} == Categorias@{Categoria Producto ID},",
						"     joinType:'left',",
						"     broadcast: 'auto')~> JoinCategorias",
						"JoinCategorias sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          id_producto as integer,",
						"          desc_referencia as string,",
						"          id_subcategoria as string,",
						"          desc_producto as string,",
						"          desc_subcategoria as string,",
						"          id_categoria as string,",
						"          desc_categoria as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          id_producto = {Producto ID},",
						"          desc_referencia = {Numero Producto},",
						"          id_subcategoria = {Producto Sub Categoria ID},",
						"          desc_producto = {Nombre Producto},",
						"          desc_subcategoria = {Descripcion Subcategoria},",
						"          id_categoria = Categorias@{Categoria Producto ID},",
						"          desc_categoria = {Descripcion Categoria}",
						"     )) ~> DimProductos"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_LOAD_dim_regiones')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3.load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_Regiones",
								"type": "DatasetReference"
							},
							"name": "Regiones"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_dim_regiones",
								"type": "DatasetReference"
							},
							"name": "DimRegiones",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          {Region ID} as integer,",
						"          {Region Desc} as string,",
						"          {Detalle region} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Regiones",
						"Regiones sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_region as integer,",
						"          desc_region as string,",
						"          desc_detalle as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          id_region = {Region ID},",
						"          desc_region = {Region Desc},",
						"          desc_detalle = {Detalle region}",
						"     )) ~> DimRegiones"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_LOAD_fac_compras')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3.load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_detalle_ordenes",
								"type": "DatasetReference"
							},
							"name": "DetalleOrdenes"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_detalle_envios",
								"type": "DatasetReference"
							},
							"name": "DetalleEnvios"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_dim_regiones",
								"type": "DatasetReference"
							},
							"name": "Regiones"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_fac_compras",
								"type": "DatasetReference"
							},
							"name": "FacCompras",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "JoinDetalleEnvios"
						},
						{
							"name": "JoinRegiones"
						},
						{
							"name": "IdCompra"
						},
						{
							"name": "SeleccionarColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Detalle Orden} as integer,",
						"          {Numero Orden} as string,",
						"          {Producto ID} as integer,",
						"          {Linea Total} as double,",
						"          Cantidad as integer,",
						"          Descuento as double,",
						"          {Precio Unitario} as double,",
						"          Ganancia as double,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DetalleOrdenes",
						"source(output(",
						"          num_order as string,",
						"          fec_orden as date,",
						"          fec_envio as date,",
						"          modo_envio as string,",
						"          cliente_id as string,",
						"          imp_subtotal as double,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DetalleEnvios",
						"source(output(",
						"          id_region as integer,",
						"          desc_region as string,",
						"          desc_detalle as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Regiones",
						"DetalleOrdenes, DetalleEnvios join({Numero Orden} == num_order",
						"     && DetalleOrdenes@region_id == DetalleEnvios@region_id,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> JoinDetalleEnvios",
						"JoinDetalleEnvios, Regiones join(DetalleOrdenes@region_id == id_region,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> JoinRegiones",
						"SeleccionarColumnas keyGenerate(output(id_compra as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> IdCompra",
						"JoinRegiones select(mapColumn(",
						"          {Detalle Orden},",
						"          {Numero Orden},",
						"          {Producto ID},",
						"          {Linea Total},",
						"          Cantidad,",
						"          Descuento,",
						"          {Precio Unitario},",
						"          Ganancia,",
						"          num_order,",
						"          fec_orden,",
						"          fec_envio,",
						"          modo_envio,",
						"          cliente_id,",
						"          imp_subtotal,",
						"          id_region,",
						"          desc_region,",
						"          desc_detalle",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SeleccionarColumnas",
						"IdCompra sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_compra as long,",
						"          num_detalle_orden as integer,",
						"          num_orden as integer,",
						"          id_producto as integer,",
						"          id_modo_envio as integer,",
						"          num_cantidad as integer,",
						"          imp_subtotal as decimal(12,2),",
						"          imp_linea_total as decimal(12,2),",
						"          imp_descuento as decimal(12,2),",
						"          imp_precio_unitario as decimal(12,2),",
						"          imp_ganancia as decimal(12,2),",
						"          fec_orden as date,",
						"          fec_envio as date,",
						"          id_cliente as integer,",
						"          id_region as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          id_compra,",
						"          num_detalle_orden = {Detalle Orden},",
						"          num_orden = {Numero Orden},",
						"          id_producto = {Producto ID},",
						"          id_modo_envio = modo_envio,",
						"          num_cantidad = Cantidad,",
						"          imp_subtotal,",
						"          imp_linea_total = {Linea Total},",
						"          imp_descuento = Descuento,",
						"          imp_precio_unitario = {Precio Unitario},",
						"          imp_ganancia = Ganancia,",
						"          fec_orden,",
						"          fec_envio,",
						"          id_cliente = cliente_id,",
						"          id_region",
						"     )) ~> FacCompras"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_LOAD_fac_targets')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "3.load"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_db_target_region",
								"type": "DatasetReference"
							},
							"name": "Targets"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_DW_fac_targets",
								"type": "DatasetReference"
							},
							"name": "FacTargets",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          fecha as string,",
						"          anio as string,",
						"          mes as string,",
						"          {Region ID} as integer,",
						"          Target as decimal(12,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Targets",
						"Targets sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as date,",
						"          id_region as integer,",
						"          imp_valor as decimal(12,2)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'allErrors',",
						"     outputRejectedData: true,",
						"     rejectedData_container: 'errors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     mapColumn(",
						"          id_fecha = fecha,",
						"          id_region = {Region ID},",
						"          imp_valor = Target",
						"     )) ~> FacTargets"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_categorias_producto')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_productos_categoria",
								"type": "DatasetReference"
							},
							"name": "StagingCategoriasProducto"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos_categoria",
								"type": "DatasetReference"
							},
							"name": "ValidationCategoriasProducto",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Categoria} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingCategoriasProducto",
						"ConversionColumnas filter({Categoria Producto ID} != '') ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Categoria Producto ID}),",
						"     {Descripcion Categoria} = first({Descripcion Categoria})) ~> RemoverDuplicados",
						"StagingCategoriasProducto derive({Categoria Producto ID} = case ( \r",
						"    (isNull({Categoria Producto ID}) || (upper({Categoria Producto ID}) == 'NULL')), '', {Categoria Producto ID} \r",
						")) ~> ConversionColumnas",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Categoria Producto ID} as string,",
						"          {Descripcion Categoria} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Categoria Producto ID},",
						"          {Descripcion Categoria}",
						"     )) ~> ValidationCategoriasProducto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_cliente_localizacion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_lt_customer_localizacion",
								"type": "DatasetReference"
							},
							"name": "StagingClienteLocalizacion"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_lt_customer_localizacion",
								"type": "DatasetReference"
							},
							"name": "ValidationClienteLocalizacion",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Cliente ID} as string,",
						"          Pais as string,",
						"          Ciudad as string,",
						"          Estado as string,",
						"          {Codigo Postal} as string,",
						"          Region as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingClienteLocalizacion",
						"StagingClienteLocalizacion derive({Cliente ID} = toInteger(\r",
						"    case ( \r",
						"        (isNull({Cliente ID}) || (upper({Cliente ID}) == 'NULL')), '', {Cliente ID} \r",
						"    )\r",
						"),",
						"          {Codigo Postal} = toInteger(\r",
						"    case ( \r",
						"        (isNull({Codigo Postal}) || (upper({Codigo Postal}) == 'NULL')), '', {Codigo Postal} \r",
						"    )\r",
						"),",
						"          Region = toInteger(\r",
						"    case ( \r",
						"        (isNull(Region) || (upper(Region) == 'NULL')), '', Region\r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull({Cliente ID})), {Cliente ID} > 0) &&\r",
						"and(not(isNull({Codigo Postal})), {Codigo Postal} > 0) &&\r",
						"and(not(isNull(Region)), Region > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Cliente ID}),",
						"     Pais = first(Pais),",
						"          Ciudad = first(Ciudad),",
						"          Estado = first(Estado),",
						"          {Codigo Postal} = first({Codigo Postal}),",
						"          Region = first(Region)) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Cliente ID} as integer,",
						"          Pais as string,",
						"          Ciudad as string,",
						"          Estado as string,",
						"          {Codigo Postal} as integer,",
						"          Region as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Cliente ID},",
						"          Pais,",
						"          Ciudad,",
						"          Estado,",
						"          {Codigo Postal},",
						"          Region",
						"     )) ~> ValidationClienteLocalizacion"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_clientes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_customer",
								"type": "DatasetReference"
							},
							"name": "StagingClientes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_customer",
								"type": "DatasetReference"
							},
							"name": "ValidationClientes",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Cliente ID} as string,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Segmento as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingClientes",
						"StagingClientes derive({Cliente ID} = toInteger(\r",
						"    case ( \r",
						"\r",
						"        (isNull({Cliente ID}) || (upper({Cliente ID}) == 'NULL')), '',\r",
						"        and(not(isNull({Cliente ID}) || (upper({Cliente ID}) == 'NULL')), like({Cliente ID}, '%-%')), split({Cliente ID}, '-')[2],\r",
						"        {Cliente ID} \r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull({Cliente ID})), {Cliente ID} > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Cliente ID}),",
						"     Nombre = first({Nombre}),",
						"          Apellido = first({Apellido}),",
						"          Segmento = first({Segmento})) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Cliente ID} as integer,",
						"          Nombre as string,",
						"          Apellido as string,",
						"          Segmento as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Cliente ID},",
						"          Nombre,",
						"          Apellido,",
						"          Segmento",
						"     )) ~> ValidationClientes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_detalle_envios')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_tb_detalle_envios",
								"type": "DatasetReference"
							},
							"name": "StagingDetalleEnvios"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_detalle_envios",
								"type": "DatasetReference"
							},
							"name": "ValidationDetalleEnvios",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          num_order as string,",
						"          fec_orden as date,",
						"          fec_envio as date,",
						"          modo_envio as string,",
						"          cliente_id as string,",
						"          imp_subtotal as double,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingDetalleEnvios",
						"ConversionColumnas filter(num_order != '' && modo_envio != '' && cliente_id != '') ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy(num_order),",
						"     fec_orden = first(fec_orden),",
						"          fec_envio = first(fec_envio),",
						"          modo_envio = first(modo_envio),",
						"          cliente_id = first(cliente_id),",
						"          imp_subtotal = first(imp_subtotal),",
						"          region_id = first(region_id)) ~> RemoverDuplicados",
						"StagingDetalleEnvios derive(num_order = case ( \r",
						"    (isNull(num_order) || (upper(num_order) == 'NULL')), '', num_order\r",
						"),",
						"          modo_envio = case ( \r",
						"    (isNull(modo_envio) || (upper(modo_envio) == 'NULL')), '', modo_envio\r",
						"),",
						"          cliente_id = case ( \r",
						"\r",
						"        (isNull(cliente_id) || (upper(cliente_id) == 'NULL')), '',\r",
						"        and(not(isNull(cliente_id) || (upper(cliente_id) == 'NULL')), like(cliente_id, '%-%')), split(cliente_id, '-')[2],\r",
						"        cliente_id \r",
						"    )) ~> ConversionColumnas",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          num_order as string,",
						"          fec_orden as date,",
						"          fec_envio as date,",
						"          modo_envio as string,",
						"          cliente_id as string,",
						"          imp_subtotal as double,",
						"          region_id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          num_order,",
						"          fec_orden,",
						"          fec_envio,",
						"          modo_envio,",
						"          cliente_id,",
						"          imp_subtotal,",
						"          region_id",
						"     )) ~> ValidationDetalleEnvios"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_detalle_ordenes')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_detalle_ordenes",
								"type": "DatasetReference"
							},
							"name": "StagingDetalleOrdenes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_detalle_ordenes",
								"type": "DatasetReference"
							},
							"name": "ValidationDetalleOrdenes",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						},
						{
							"name": "ConversionColumnas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Detalle Orden} as integer,",
						"          {Numero Orden} as string,",
						"          {Producto ID} as integer,",
						"          {Linea Total} as double,",
						"          Cantidad as integer,",
						"          Descuento as double,",
						"          {Precio Unitario} as double,",
						"          Ganancia as double,",
						"          region_id as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingDetalleOrdenes",
						"ConversionColumnas filter(and(not(isNull({Detalle Orden})), {Detalle Orden} > 0) && \r",
						"({Numero Orden} != '') && \r",
						"and(not(isNull({Producto ID})), {Producto ID} > 0) && \r",
						"and(not(isNull(region_id)), region_id > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Numero Orden},",
						"          {Detalle Orden},",
						"          {Producto ID},",
						"          region_id),",
						"     {Linea Total} = first({Linea Total}),",
						"          Cantidad = first(Cantidad),",
						"          Descuento = first(Descuento),",
						"          {Precio Unitario} = first({Precio Unitario}),",
						"          Ganancia = first(Ganancia)) ~> RemoverDuplicados",
						"StagingDetalleOrdenes derive({Numero Orden} = case ( \r",
						"    (isNull({Numero Orden}) || (upper({Numero Orden}) == 'NULL')), '', {Numero Orden} \r",
						")) ~> ConversionColumnas",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Detalle Orden} as integer,",
						"          {Numero Orden} as string,",
						"          {Producto ID} as integer,",
						"          {Linea Total} as double,",
						"          Cantidad as integer,",
						"          Descuento as double,",
						"          {Precio Unitario} as double,",
						"          Ganancia as double,",
						"          region_id as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Detalle Orden},",
						"          {Numero Orden},",
						"          {Producto ID},",
						"          {Linea Total},",
						"          Cantidad,",
						"          Descuento,",
						"          {Precio Unitario},",
						"          Ganancia,",
						"          region_id",
						"     )) ~> ValidationDetalleOrdenes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_fechas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_fechas",
								"type": "DatasetReference"
							},
							"name": "StagingFechas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_fechas",
								"type": "DatasetReference"
							},
							"name": "ValidationFechas",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_fecha as string,",
						"          num_anio as string,",
						"          num_trimestre as string,",
						"          num_mes as string,",
						"          num_dia as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingFechas",
						"StagingFechas derive(id_fecha = toDate(id_fecha, 'yyyy-MM-dd'),",
						"          num_anio = toInteger(num_anio),",
						"          num_trimestre = toInteger(num_trimestre),",
						"          num_mes = toInteger(num_mes),",
						"          num_dia = toInteger(num_dia)) ~> ConversionColumnas",
						"ConversionColumnas filter(not(isNull(id_fecha))) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy(id_fecha),",
						"     num_anio = first(num_anio),",
						"          num_trimestre = first(num_trimestre),",
						"          num_mes = first(num_mes),",
						"          num_dia = first(num_dia)) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as date,",
						"          num_anio as integer,",
						"          num_trimestre as integer,",
						"          num_mes as integer,",
						"          num_dia as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          id_fecha,",
						"          num_anio,",
						"          num_trimestre,",
						"          num_mes,",
						"          num_dia",
						"     )) ~> ValidationFechas"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_modos_envio')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_tb_modo_envio",
								"type": "DatasetReference"
							},
							"name": "StagingModosEnvio"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_tb_modo_envio",
								"type": "DatasetReference"
							},
							"name": "ValidationModosEnvio",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_modo as string,",
						"          Descripcion as string,",
						"          Tipo_x0020_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingModosEnvio",
						"StagingModosEnvio derive(id_modo = toInteger(\r",
						"    case ( \r",
						"        (isNull(id_modo) || (upper(id_modo) == 'NULL')), '', id_modo\r",
						"    )\r",
						"),",
						"          Tipo_x0020_ID = toInteger(\r",
						"    case ( \r",
						"        (isNull(Tipo_x0020_ID) || (upper(Tipo_x0020_ID) == 'NULL')), '', Tipo_x0020_ID\r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull(id_modo)), id_modo >= 0) &&\r",
						"and(not(isNull(Tipo_x0020_ID)), Tipo_x0020_ID > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy(id_modo),",
						"     Descripcion = first(Descripcion),",
						"          Tipo_x0020_ID = first(Tipo_x0020_ID)) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_modo as integer,",
						"          Descripcion as string,",
						"          Tipo_x0020_ID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          id_modo,",
						"          Descripcion,",
						"          Tipo_x0020_ID",
						"     )) ~> ValidationModosEnvio"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FLOW_VALIDATION_productos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "2.transform/validation"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL_STAGING_LT_productos",
								"type": "DatasetReference"
							},
							"name": "StagingProductos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL_VALIDATION_LT_productos",
								"type": "DatasetReference"
							},
							"name": "ValidationProductos",
							"rejectedDataLinkedService": {
								"referenceName": "LS_FILESTORAGE_SOURCE_banmarket",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "ConversionColumnas"
						},
						{
							"name": "FiltrarInconsistencias"
						},
						{
							"name": "RemoverDuplicados"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Producto ID} as string,",
						"          {Numero Producto} as string,",
						"          {Producto Sub Categoria ID} as string,",
						"          {Nombre Producto} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> StagingProductos",
						"StagingProductos derive({Producto ID} = toInteger(\r",
						"    case ( \r",
						"        (isNull({Producto ID}) || (upper({Producto ID}) == 'NULL')), '', {Producto ID} \r",
						"    )\r",
						")) ~> ConversionColumnas",
						"ConversionColumnas filter(and(not(isNull({Producto ID})), {Producto ID} > 0)) ~> FiltrarInconsistencias",
						"FiltrarInconsistencias aggregate(groupBy({Producto ID}),",
						"     {Numero Producto} = first({Numero Producto}),",
						"          {Producto Sub Categoria ID} = first({Producto Sub Categoria ID}),",
						"          {Nombre Producto} = first({Nombre Producto})) ~> RemoverDuplicados",
						"RemoverDuplicados sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Producto ID} as integer,",
						"          {Numero Producto} as string,",
						"          {Producto Sub Categoria ID} as string,",
						"          {Nombre Producto} as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputRejectedData: true,",
						"     mapColumn(",
						"          {Producto ID},",
						"          {Numero Producto},",
						"          {Producto Sub Categoria ID},",
						"          {Nombre Producto}",
						"     )) ~> ValidationProductos"
					]
				}
			},
			"dependsOn": []
		}
	]
}